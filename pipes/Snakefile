import os
import json
import pandas as pd
from snakemake.utils import min_version
# snakemake built-in report function requires min version 5.1
min_version("7.12.0")

configfile: "../config/config.yaml"

#read the sample file using pandas lib (sample names+ fastq names) and crezate index using the sample name
samples = pd.read_csv(config['data']['sample_file'], sep='\t', index_col=0)
SAMPLES = samples.index
if config['data']['sample_info']:
    SAMPLE_MAP = json.load(open(config['data']['sample_info']))
    PAIRS = list(SAMPLE_MAP.keys())
else:
    SAMPLE_MAP = None
    PAIRS = SAMPLES

# ------------------ Wildcard constraints ------------------ #
wildcard_constraints:
    pair = "|".join(PAIRS)

if not config.get('workdir'):
    config['workdir'] = os.getcwd()
# work dir
workdir: config['workdir']

# ---------------------- include rules --------------------- #
include: "../rules/common.smk"
include: "../rules/trimmed.smk"
include: "../rules/mapping.smk"
include: "../rules/filtering.smk"
include: "../rules/callpeak.smk"
include: "../rules/motif.smk"
include: "../rules/quality.smk"
include: "../rules/report.smk"

# ------------------------- run rules ---------------------- #
# report: "report/workflow.rst"
# local
localrules:
    stats, idxstats, flagstat

rule all:
    input:
        # trimmed adapter
        expand("trimmed/{sample}.clean.{unit}.fq.gz", sample=SAMPLES, unit=['R1', 'R2']),
        # spikein
        expand("bowtie2/{sample}.spikein.bam", sample=SAMPLES),
        # stats
        expand("bowtie2/stats/{sample}.{stats}", sample=SAMPLES, stats=['stats', 'idxstats', 'flagstats']),
        expand("bowtie2/plot/{sample}", sample=SAMPLES),
        # mapping and remove duplicates
        expand("dedup/{sample}.cons.bam.bai", sample=SAMPLES),
        # shift 9bp
        expand("dedup/{sample}.filtered.bam", sample=SAMPLES),
        # callpeak
        expand("macs2/narrow/{pair}_peaks.narrowPeak", pair=PAIRS),
        expand("macs2/broad/{pair}_peaks.broadPeak", pair=PAIRS),
        # convert to bigwig
        expand("macs2/bigwig/{sample}.norm.bw", sample=SAMPLES),
        # extract peaks
        expand("macs2/narrow/{pair}_homer_peaks.txt", pair=PAIRS),
        # motify analysis
        expand("motifs/{pair}", pair=PAIRS),
        # peak annotate
        expand('macs2/anno/{pair}.peakAnno.{ext}', pair=PAIRS, ext=['pdf', 'txt']),
        # bw data quality
        expand("macs2/matrix/{pair}.{pos}.{types}.pdf", pair=PAIRS, pos=['tss', 'genebody'], types=['heatmap', 'profile']),
        # get stats
        "report/stats.csv",