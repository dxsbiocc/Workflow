# -*- encoding: utf-8 -*-
# ============================================================
# File        : wrapper.py
# Time        : 2022/08/17 17:12:46
# Author      : dengxsh 
# Version     : 1.0
# Contact     : 920466915@qq.com
# Copyright   : Copyright (c) 2022, dengxsh
# License     : MIT
# Description : The role of the current file 
# ============================================================


import os
from snakemake.shell import shell
from snakemake_wrapper_utils.base import WrapperBase


class Wrapper(WrapperBase):

    def __init__(self, snakemake) -> None:
        super().__init__(snakemake)

    def parser(self):
        # Check inputs/arguments.
        if len(self.snakemake.input) == 0:
            raise ValueError("A reference genome has to be provided!")
        elif len(self.snakemake.input) > 1:
            raise ValueError("Only one reference genome can be inputed!")

        self.valid_suffixes = {".0123", ".amb", ".ann", ".bwt.2bit.64", ".pac"}

        prefixes = set()
        for s in self.snakemake.output:
            suffix = self.get_valid_suffix(s)
            if suffix is None:
                raise ValueError(f"{s} cannot be generated by bwa-mem2 index (invalid suffix).")
            prefixes.add(s[: -len(suffix)])

        if len(prefixes) != 1:
            raise ValueError("Output files must share common prefix up to their file endings.")
        (self.prefix,) = prefixes

    def run(self):
        shell(
            "bwa-mem2 index" 
            " -p {self.prefix}" 
            " {self.snakemake.input[0]}" 
            " {self.log}"
        )

    def get_valid_suffix(self, path):
        for suffix in self.valid_suffixes:
            if path.endswith(suffix):
                return suffix

if __name__ == '__main__':
    Wrapper(snakemake)